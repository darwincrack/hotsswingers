{"version":3,"sources":["adapter.js","app.js","common.js","filter.js"],"names":["window","RTCPeerConnection","webkitRTCPeerConnection","mozRTCPeerConnection","RTCIceCandidate","mozRTCIceCandidate","webkitRTCIceCandidate","RTCSessionDescription","mozRTCSessionDescription","webkitRTCSessionDescription","URL","mozURL","webkitURL","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","PerformerChat","undefined","angular","module","$interpolateProvider","startSymbol","endSymbol","constant","appSettings","value","_","$","factory","$location","stringRepeat","num","replace","Array","join","externalLinks","text","String","localStorageIsEnabled","uid","Date","result","localStorage","setItem","getItem","removeItem","e","readJsonFromController","file","request","XMLHttpRequest","open","setRequestHeader","send","JSON","parse","responseText","getBadWords","input","badwords","i","swearwords","length","swear","RegExp","match","push","replaceBadWords","stringify","swearWordPath","replacement","obToquery","obj","prefix","str","p","k","v","isObject","encodeURIComponent","isExpired","object","expiresOn","getTime","scrollTo","element","to","duration","difference","scrollTop","perTick","setTimeout","removeLastSpace","numberToAlpha","data","string","secondsToDateTime","second","type","date","coverMilisecondToTime","seconds","secondsS","minutes","minutesS","millis","options","hours","days","months","years","Math","round","floor","fixed","toFixed","hoursS","daysS","monthsS","yearsS","$q","unzip","zipfile","extractAndParse","dfd","defer","reader","FileReader","onerror","reject","bind","onload","Error","zip","JSZip","nFile","files","filename","name","ext","split","pop","resolve","status","readAsArrayBuffer","promise","cache","getInteger","startPoint","minLength","maxLength","val","substring","matcher","exec","$locale","dateParserHelpers","datetimeFormats","DATETIME_FORMATS","monthNames","MONTH","concat","SHORTMONTH","dayNames","DAY","SHORTDAY","format","isDate","now","i_val","i_format","format_token","year","getFullYear","month","getMonth","getDate","hh","mm","ss","sss","ampm","z","parsedZ","charAt","token","_i_format","month_name","toLowerCase","j","day_name","tzStr","parseInt","substr","localDate","getTimezoneOffset","filter","isDefined","moment","fromNow","count","toUpperCase","slice","isNumber","number","isNaN","arr","field","uniq","a","emojis","emojiarea","icons","util","escapeRegex","htmlEntities","EmojiArea","createIcon","group","emoji","path","key","hasOwnProperty","all","reg","txt","exp","html","find","each","after","remove","places","parseFloat","defaultText","birthdate","cur","diff","avatar","indexOf","meta","unserialize","imageMedium","BASE_URL","placeholderAvatars","random","mainImage","images","thumbnail230","user","username","practice","n","special","deca","collection","keyname","output","keys","forEach","item","time","createdAt","getDay","isString","trim","that","utf8Overhead","chr","code","charCodeAt","error","msg","line","read_until","offset","stopchr","buf","read_chrs","_unserialize","dtype","dataoffset","keyandchrs","contig","array","readdata","readData","ccount","stringlength","kprops","kchrs","vprops","vchrs","chrs","typeconvert","x"],"mappings":"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","file":"app.js","sourcesContent":["window.RTCPeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection;\nwindow.RTCIceCandidate = window.RTCIceCandidate || window.mozRTCIceCandidate || window.webkitRTCIceCandidate;\nwindow.RTCSessionDescription = window.RTCSessionDescription || window.mozRTCSessionDescription || window.webkitRTCSessionDescription;\nwindow.URL = window.URL || window.mozURL || window.webkitURL;\nwindow.navigator.getUserMedia = window.navigator.getUserMedia || window.navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia;\n","'use strict';\nif (typeof PerformerChat === undefined) {\n  var PerformerChat = {};\n}\n\nangular.module('matroshkiApp', [\n  'ngCookies',\n  'ngSanitize',\n  'ui.bootstrap',\n  'btford.socket-io',\n//  'ngTagsInput',\n//  'ngCkeditor'\n//  'ui.tinymce',\n  'angularLazyImg'\n], function ($interpolateProvider) {\n  $interpolateProvider.startSymbol('<%');\n  $interpolateProvider.endSymbol('%>');\n})\n.constant('appSettings', window.appSettings)\n.constant('PerformerChat', PerformerChat)\n.value('_', _)\n.value('$', $);\n","angular.module('matroshkiApp').factory('commonHelper', function($location) {\n\treturn {\n\t\tstringRepeat: function(num, replace) {\n\t\t\treturn new Array(num + 1).join(replace);\n\t\t},\n\t\texternalLinks:function(text){\n\t\treturn String(text).replace(/href=/gm, \"class=\\\"ex-link\\\" href=\");\n\t\t\n\t\t},\n\t\tlocalStorageIsEnabled: function() {\n\t\t\tvar uid = new Date(),\n\t\t\t\t\t\t\tresult;\n\n\t\t\ttry {\n\t\t\t\tlocalStorage.setItem(\"uid\", uid);\n\t\t\t\tresult = localStorage.getItem(\"uid\") === uid;\n\t\t\t\tlocalStorage.removeItem(\"uid\");\n\t\t\t\treturn result && localStorage;\n\t\t\t} catch (e) {\n\t\t\t}\n\t\t},\n\t\treadJsonFromController: function(file) {\n\t\t\tvar request = new XMLHttpRequest();\n\t\t\trequest.open('GET', file, false);\n\t\t\trequest.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\t\t\trequest.send(null);\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(request.responseText);\n\t\t\t} catch (e) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t},\n\t\tgetBadWords: function(input) {\n\t\t\tif (input) {\n\t\t\t\tvar badwords = [];\n\t\t\t\tfor (var i = 0; i < swearwords.length; i++) {\n\t\t\t\t\tvar swear = new RegExp(swearwords[i], 'g');\n\t\t\t\t\tif (input.match(swear)) {\n\t\t\t\t\t\tbadwords.push(swearwords[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn badwords;\n\t\t\t}\n\t\t},\n\t\treplaceBadWords: function(input) {\n\t\t\tif (this.localStorageIsEnabled()) {\n\t\t\t\tif (localStorage.getItem('localSwears') === null) {\n\t\t\t\t\t// stringify the array so that it can be stored in local storage\n\t\t\t\t\tlocalStorage.setItem('localSwears', JSON.stringify(readJsonFromController(swearWordPath)));\n\t\t\t\t}\n\t\t\t\tswearwords = JSON.parse(localStorage.getItem('localSwears'));\n\t\t\t} else {\n\t\t\t\tswearwords = this.readJsonFromController(swearWordPath);\n\t\t\t}\n\t\t\tif (swearwords === null) {\n\t\t\t\treturn input;\n\t\t\t}\n\t\t\tif (input) {\n\t\t\t\tfor (var i = 0; i < swearwords.length; i++) {\n\t\t\t\t\tvar swear =  new RegExp('\\\\b' + swearwords[i] + '\\\\b', 'gi');\n\t\t\t\t\tif (input.match(swear)) {\n\t\t\t\t\t\tvar replacement = this.stringRepeat(swearwords[i].length, \"*\");\n\t\t\t\t\t\tinput = input.replace(swear, replacement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn input;\n\t\t\t} else {\n\t\t\t\treturn input;\n\t\t\t}\n\t\t},\n\t\tobToquery: function(obj, prefix) {\n\t\t\tvar str = [];\n\t\t\tfor (var p in obj) {\n\t\t\t\tvar k = prefix ? prefix + \"[\" + p + \"]\" : p,\n\t\t\t\t\t\t\t\tv = obj[k];\n\t\t\t\tstr.push(angular.isObject(v) ? this.obToquery(v, k) : (k) + \"=\" + encodeURIComponent(v));\n\t\t\t}\n\t\t\treturn str.join(\"&\");\n\t\t},\n\t\tisExpired: function(object) {\n\t\t\tif (!object.expiresOn) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (new Date(object.expiresOn).getTime() < new Date().getTime() && object.expiresOn) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tscrollTo: function(element, to, duration) {\n\t\t\tif (duration < 0)\n\t\t\t\treturn;\n\t\t\tvar difference = to - element.scrollTop;\n\t\t\tvar perTick = difference / duration * 10;\n\n\t\t\tsetTimeout(function() {\n\t\t\t\telement.scrollTop = element.scrollTop + perTick;\n\t\t\t\tif (element.scrollTop == to)\n\t\t\t\t\treturn;\n\t\t\t\tscrollTo(element, to, duration - 10);\n\t\t\t}, 10);\n\t\t},\n\t\tremoveLastSpace: function(str) {\n\t\t\treturn str.replace(/\\s+$/, '');\n\t\t},\n\t\tnumberToAlpha: function(data) {\n\t\t\tvar string = '';\n\t\t\tswitch (data) {\n\t\t\t\tcase '0':\n\t\t\t\t\tstring = 'A';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '1':\n\t\t\t\t\tstring = 'B';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '2':\n\t\t\t\t\tstring = 'C';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '3':\n\t\t\t\t\tstring = 'D';\n\t\t\t\t\tbreak;\n\t\t\t\tcase '4':\n\t\t\t\t\tstring = 'F';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn string;\n\t\t},\n\t\tsecondsToDateTime: function(second, type) {\n\t\t\tvar string = '';\n\n\t\t\tvar date = this.coverMilisecondToTime(second * 1000, 'minute');\n\t\t\tstring = date.seconds + ' second' + date.secondsS;\n\t\t\tif (date.minutes > 0) {\n\t\t\t\tstring = date.minutes + ' min' + date.minutesS + ' ' + string;\n\t\t\t}\n\t\t\treturn string;\n\t\t\treturn;\n\t\t},\n\t\tcoverMilisecondToTime: function(millis, type, options) {\n\t\t\tvar seconds = 0;\n\t\t\tvar minutes = 0;\n\t\t\tvar hours = 0;\n\t\t\tvar days = 0;\n\t\t\tvar months = 0;\n\t\t\tvar years = 0;\n\t\t\tif (type === 'day') {\n\t\t\t\tseconds = Math.round((millis / 1000) % 60);\n\t\t\t\tminutes = Math.floor(((millis / (60000)) % 60));\n\t\t\t\thours = Math.floor(((millis / (3600000)) % 24));\n\t\t\t\tdays = Math.floor(((millis / (3600000)) / 24));\n\t\t\t\tmonths = 0;\n\t\t\t\tyears = 0;\n\t\t\t} else if (type === 'second') {\n\t\t\t\tseconds = Math.floor(millis / 1000);\n\t\t\t\tminutes = 0;\n\t\t\t\thours = 0;\n\t\t\t\tdays = 0;\n\t\t\t\tmonths = 0;\n\t\t\t\tyears = 0;\n\t\t\t} else if (type === 'minute') {\n\t\t\t\tif (options && options.fixed) {\n\t\t\t\t\tseconds = (millis / 1000).toFixed(options.fixed);\n\t\t\t\t} else {\n\t\t\t\t\tseconds = Math.round((millis / 1000) % 60);\n\t\t\t\t}\n\t\t\t\tminutes = Math.floor(millis / 60000);\n\t\t\t\thours = 0;\n\t\t\t\tdays = 0;\n\t\t\t\tmonths = 0;\n\t\t\t\tyears = 0;\n\t\t\t} else if (type === 'hour') {\n\t\t\t\tseconds = Math.round((millis / 1000) % 60);\n\t\t\t\tminutes = Math.floor(((millis / (60000)) % 60));\n\t\t\t\thours = Math.floor(millis / 3600000);\n\t\t\t\tdays = 0;\n\t\t\t\tmonths = 0;\n\t\t\t\tyears = 0;\n\t\t\t} else if (type === 'month') {\n\t\t\t\tseconds = Math.round((millis / 1000) % 60);\n\t\t\t\tminutes = Math.floor(((millis / (60000)) % 60));\n\t\t\t\thours = Math.floor(((millis / (3600000)) % 24));\n\t\t\t\tdays = Math.floor(((millis / (3600000)) / 24) % 30);\n\t\t\t\tmonths = Math.floor(((millis / (3600000)) / 24) / 30);\n\t\t\t\tyears = 0;\n\t\t\t} else if (type === 'year') {\n\t\t\t\tseconds = Math.round((millis / 1000) % 60);\n\t\t\t\tminutes = Math.floor(((millis / (60000)) % 60));\n\t\t\t\thours = Math.floor(((millis / (3600000)) % 24));\n\t\t\t\tdays = Math.floor(((millis / (3600000)) / 24) % 30);\n\t\t\t\tmonths = Math.floor(((millis / (3600000)) / 24 / 30) % 12);\n\t\t\t\tyears = Math.floor((millis / (3600000)) / 24 / 365);\n\t\t\t}\n\t\t\tvar secondsS = (seconds < 2) ? '' : 's';\n\t\t\tvar minutesS = (minutes < 2) ? '' : 's';\n\t\t\tvar hoursS = (hours < 2) ? '' : 's';\n\t\t\tvar daysS = (days < 2) ? '' : 's';\n\t\t\tvar monthsS = (months < 2) ? '' : 's';\n\t\t\tvar yearsS = (years < 2) ? '' : 's';\n\t\t\treturn {\n\t\t\t\tseconds: seconds,\n\t\t\t\tsecondsS: secondsS,\n\t\t\t\tminutes: minutes,\n\t\t\t\tminutesS: minutesS,\n\t\t\t\thours: hours,\n\t\t\t\thoursS: hoursS,\n\t\t\t\tdays: days,\n\t\t\t\tdaysS: daysS,\n\t\t\t\tmonths: months,\n\t\t\t\tmonthsS: monthsS,\n\t\t\t\tyears: years,\n\t\t\t\tyearsS: yearsS\n\t\t\t};\n\n\n\t\t}\n\t};\n}\n)\n\t.factory(\"extractAndParse\", function($q) {\n\t\tfunction unzip(zipfile) {\n\n\t\t}\n\n\t\tfunction extractAndParse(zipfile) {\n\t\t\tvar dfd = $q.defer();\n\t\t\tvar reader = new FileReader();\n\n\t\t\treader.onerror = dfd.reject.bind(dfd);\n\t\t\treader.onload = function(e) {\n\t\t\t\tif (!reader.result)\n\t\t\t\t\tdfd.reject(new Error(\"Unknown error\"));\n\t\t\t\tvar zip = new JSZip(reader.result);\n\t\t\t\tvar nFile = 0;\n\t\t\t\tfor (var i in zip.files) {\n\t\t\t\t\tvar filename = zip.files[i].name;\n\t\t\t\t\tif (zip.files[i].name) {\n\t\t\t\t\t\tvar ext = filename.split('.').pop();\n\t\t\t\t\t\tif (ext == 'xls' || ext == 'xlsx') {\n\t\t\t\t\t\t\tnFile++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (nFile != 1) {\n\t\t\t\t\tdfd.reject(new Error('Your zip file should contain only one spreadsheet.'));\n\t\t\t\t}\n\t\t\t\tdfd.resolve({status: 'ok'});\n\t\t\t};\n\t\t\treader.readAsArrayBuffer(zipfile);\n\t\t\treturn dfd.promise;\n\t\t}\n\n\t\treturn extractAndParse;\n\t})\n\t.factory('dateParserHelpers', [function() {\n\n\t\t\t'use strict';\n\n\t\t\tvar cache = {};\n\n\t\t\treturn {\n\t\t\t\t// Returns string value within a range if it's an integer\n\t\t\t\tgetInteger: function(string, startPoint, minLength, maxLength) {\n\t\t\t\t\tvar val = string.substring(startPoint);\n\t\t\t\t\tvar matcher = cache[minLength + '_' + maxLength];\n\t\t\t\t\tif (!matcher) {\n\t\t\t\t\t\tmatcher = new RegExp('^(\\\\d{' + minLength + ',' + maxLength + '})');\n\t\t\t\t\t\tcache[minLength + '_' + maxLength] = matcher;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar match = matcher.exec(val);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\treturn match[1];\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}])\n\t.factory('$dateParser', ['$locale', 'dateParserHelpers', function($locale, dateParserHelpers) {\n\n\t\t\t'use strict';\n\n\t\t\t// Fetch date and time formats from $locale service\n\t\t\tvar datetimeFormats = $locale.DATETIME_FORMATS;\n\n\t\t\t// Build array of month and day names\n\t\t\tvar monthNames = datetimeFormats.MONTH.concat(datetimeFormats.SHORTMONTH);\n\t\t\tvar dayNames = datetimeFormats.DAY.concat(datetimeFormats.SHORTDAY);\n\n\t\t\treturn function(val, format) {\n\n\t\t\t\t// If input is a Date object, there's no need to process it\n\t\t\t\tif (angular.isDate(val)) {\n\t\t\t\t\treturn val;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tval = val + '';\n\t\t\t\t\tformat = format + '';\n\n\t\t\t\t\t// If no format is provided, just pass it to the Date constructor\n\t\t\t\t\tif (!format.length) {\n\t\t\t\t\t\treturn new Date(val);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if format exists in the format collection\n\t\t\t\t\tif (datetimeFormats[format]) {\n\t\t\t\t\t\tformat = datetimeFormats[format];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Initial values\n\t\t\t\t\tvar now = new Date(),\n\t\t\t\t\t\ti_val = 0,\n\t\t\t\t\t\ti_format = 0,\n\t\t\t\t\t\tformat_token = '',\n\t\t\t\t\t\tyear = now.getFullYear(),\n\t\t\t\t\t\tmonth = now.getMonth() + 1,\n\t\t\t\t\t\tdate = now.getDate(),\n\t\t\t\t\t\thh = 0,\n\t\t\t\t\t\tmm = 0,\n\t\t\t\t\t\tss = 0,\n\t\t\t\t\t\tsss = 0,\n\t\t\t\t\t\tampm = 'am',\n\t\t\t\t\t\tz = 0,\n\t\t\t\t\t\tparsedZ = false;\n\n\t\t\t\t\t// TODO: Extract this into a helper function perhaps?\n\t\t\t\t\twhile (i_format < format.length) {\n\t\t\t\t\t\t// Get next token from format string\n\t\t\t\t\t\tformat_token = format.charAt(i_format);\n\n\t\t\t\t\t\tvar token = '';\n\n\t\t\t\t\t\t// TODO: Handle double single quotes\n\t\t\t\t\t\t// Handle quote marks for strings within format string\n\t\t\t\t\t\tif (format.charAt(i_format) == \"'\") {\n\t\t\t\t\t\t\tvar _i_format = i_format;\n\n\t\t\t\t\t\t\twhile ((format.charAt(++i_format) != \"'\") && (i_format < format.length)) {\n\t\t\t\t\t\t\t\ttoken += format.charAt(i_format);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (val.substring(i_val, i_val + token.length) != token) {\n\t\t\t\t\t\t\t\tthrow 'Pattern value mismatch';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ti_val += token.length;\n\t\t\t\t\t\t\ti_format++;\n\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twhile ((format.charAt(i_format) == format_token) && (i_format < format.length)) {\n\t\t\t\t\t\t\ttoken += format.charAt(i_format++);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Extract contents of value based on format token\n\t\t\t\t\t\tif (token == 'yyyy' || token == 'yy' || token == 'y') {\n\t\t\t\t\t\t\tvar minLength, maxLength;\n\n\t\t\t\t\t\t\tif (token == 'yyyy') {\n\t\t\t\t\t\t\t\tminLength = 4;\n\t\t\t\t\t\t\t\tmaxLength = 4;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (token == 'yy') {\n\t\t\t\t\t\t\t\tminLength = 2;\n\t\t\t\t\t\t\t\tmaxLength = 2;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (token == 'y') {\n\t\t\t\t\t\t\t\tminLength = 2;\n\t\t\t\t\t\t\t\tmaxLength = 4;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tyear = dateParserHelpers.getInteger(val, i_val, minLength, maxLength);\n\n\t\t\t\t\t\t\tif (year === null) {\n\t\t\t\t\t\t\t\tthrow 'Invalid year';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ti_val += year.length;\n\n\t\t\t\t\t\t\tif (year.length == 2) {\n\t\t\t\t\t\t\t\tif (year > 70) {\n\t\t\t\t\t\t\t\t\tyear = 1900 + (year - 0);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tyear = 2000 + (year - 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (token === 'MMMM' || token == 'MMM') {\n\t\t\t\t\t\t\tmonth = 0;\n\n\t\t\t\t\t\t\tfor (var i = 0; i < monthNames.length; i++) {\n\t\t\t\t\t\t\t\tvar month_name = monthNames[i];\n\n\t\t\t\t\t\t\t\tif (val.substring(i_val, i_val + month_name.length).toLowerCase() == month_name.toLowerCase()) {\n\t\t\t\t\t\t\t\t\tmonth = i + 1;\n\t\t\t\t\t\t\t\t\tif (month > 12) {\n\t\t\t\t\t\t\t\t\t\tmonth -= 12;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\ti_val += month_name.length;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ((month < 1) || (month > 12)) {\n\t\t\t\t\t\t\t\tthrow 'Invalid month';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (token == 'EEEE' || token == 'EEE') {\n\t\t\t\t\t\t\tfor (var j = 0; j < dayNames.length; j++) {\n\t\t\t\t\t\t\t\tvar day_name = dayNames[j];\n\n\t\t\t\t\t\t\t\tif (val.substring(i_val, i_val + day_name.length).toLowerCase() == day_name.toLowerCase()) {\n\t\t\t\t\t\t\t\t\ti_val += day_name.length;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (token == 'MM' || token == 'M') {\n\t\t\t\t\t\t\tmonth = dateParserHelpers.getInteger(val, i_val, token.length, 2);\n\n\t\t\t\t\t\t\tif (month === null || (month < 1) || (month > 12)) {\n\t\t\t\t\t\t\t\tthrow 'Invalid month';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ti_val += month.length;\n\t\t\t\t\t\t} else if (token == 'dd' || token == 'd') {\n\t\t\t\t\t\t\tdate = dateParserHelpers.getInteger(val, i_val, token.length, 2);\n\n\t\t\t\t\t\t\tif (date === null || (date < 1) || (date > 31)) {\n\t\t\t\t\t\t\t\tthrow 'Invalid date';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ti_val += date.length;\n\t\t\t\t\t\t} else if (token == 'HH' || token == 'H') {\n\t\t\t\t\t\t\thh = dateParserHelpers.getInteger(val, i_val, token.length, 2);\n\n\t\t\t\t\t\t\tif (hh === null || (hh < 0) || (hh > 23)) {\n\t\t\t\t\t\t\t\tthrow 'Invalid hours';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ti_val += hh.length;\n\t\t\t\t\t\t} else if (token == 'hh' || token == 'h') {\n\t\t\t\t\t\t\thh = dateParserHelpers.getInteger(val, i_val, token.length, 2);\n\n\t\t\t\t\t\t\tif (hh === null || (hh < 1) || (hh > 12)) {\n\t\t\t\t\t\t\t\tthrow 'Invalid hours';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ti_val += hh.length;\n\t\t\t\t\t\t} else if (token == 'mm' || token == 'm') {\n\t\t\t\t\t\t\tmm = dateParserHelpers.getInteger(val, i_val, token.length, 2);\n\n\t\t\t\t\t\t\tif (mm === null || (mm < 0) || (mm > 59)) {\n\t\t\t\t\t\t\t\tthrow 'Invalid minutes';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ti_val += mm.length;\n\t\t\t\t\t\t} else if (token == 'ss' || token == 's') {\n\t\t\t\t\t\t\tss = dateParserHelpers.getInteger(val, i_val, token.length, 2);\n\n\t\t\t\t\t\t\tif (ss === null || (ss < 0) || (ss > 59)) {\n\t\t\t\t\t\t\t\tthrow 'Invalid seconds';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ti_val += ss.length;\n\t\t\t\t\t\t} else if (token === 'sss') {\n\t\t\t\t\t\t\tsss = dateParserHelpers.getInteger(val, i_val, 3, 3);\n\n\t\t\t\t\t\t\tif (sss === null || (sss < 0) || (sss > 999)) {\n\t\t\t\t\t\t\t\tthrow 'Invalid milliseconds';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ti_val += 3;\n\t\t\t\t\t\t} else if (token == 'a') {\n\t\t\t\t\t\t\tif (val.substring(i_val, i_val + 2).toLowerCase() == 'am') {\n\t\t\t\t\t\t\t\tampm = 'AM';\n\t\t\t\t\t\t\t} else if (val.substring(i_val, i_val + 2).toLowerCase() == 'pm') {\n\t\t\t\t\t\t\t\tampm = 'PM';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow 'Invalid AM/PM';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ti_val += 2;\n\t\t\t\t\t\t} else if (token == 'Z') {\n\t\t\t\t\t\t\tparsedZ = true;\n\n\t\t\t\t\t\t\tif (val[i_val] === 'Z') {\n\t\t\t\t\t\t\t\tz = 0;\n\n\t\t\t\t\t\t\t\ti_val += 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (val[i_val + 3] === ':') {\n\t\t\t\t\t\t\t\t\tvar tzStr = val.substring(i_val, i_val + 6);\n\n\t\t\t\t\t\t\t\t\tz = (parseInt(tzStr.substr(0, 3), 10) * 60) + parseInt(tzStr.substr(4, 2), 10);\n\n\t\t\t\t\t\t\t\t\ti_val += 6;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar tzStr = val.substring(i_val, i_val + 5);\n\n\t\t\t\t\t\t\t\t\tz = (parseInt(tzStr.substr(0, 3), 10) * 60) + parseInt(tzStr.substr(3, 2), 10);\n\n\t\t\t\t\t\t\t\t\ti_val += 5;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (z > 720 || z < -720) {\n\t\t\t\t\t\t\t\tthrow 'Invalid timezone';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (val.substring(i_val, i_val + token.length) != token) {\n\t\t\t\t\t\t\t\tthrow 'Pattern value mismatch';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ti_val += token.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// If there are any trailing characters left in the value, it doesn't match\n\t\t\t\t\tif (i_val != val.length) {\n\t\t\t\t\t\tthrow 'Pattern value mismatch';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Convert to integer\n\t\t\t\t\tyear = parseInt(year, 10);\n\t\t\t\t\tmonth = parseInt(month, 10);\n\t\t\t\t\tdate = parseInt(date, 10);\n\t\t\t\t\thh = parseInt(hh, 10);\n\t\t\t\t\tmm = parseInt(mm, 10);\n\t\t\t\t\tss = parseInt(ss, 10);\n\t\t\t\t\tsss = parseInt(sss, 10);\n\n\t\t\t\t\t// Is date valid for month?\n\t\t\t\t\tif (month == 2) {\n\t\t\t\t\t\t// Check for leap year\n\t\t\t\t\t\tif (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)) { // leap year\n\t\t\t\t\t\t\tif (date > 29) {\n\t\t\t\t\t\t\t\tthrow 'Invalid date';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (date > 28) {\n\t\t\t\t\t\t\t\tthrow 'Invalid date';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((month == 4) || (month == 6) || (month == 9) || (month == 11)) {\n\t\t\t\t\t\tif (date > 30) {\n\t\t\t\t\t\t\tthrow 'Invalid date';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Correct hours value\n\t\t\t\t\tif (hh < 12 && ampm == 'PM') {\n\t\t\t\t\t\thh += 12;\n\t\t\t\t\t} else if (hh > 11 && ampm == 'AM') {\n\t\t\t\t\t\thh -= 12;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar localDate = new Date(year, month - 1, date, hh, mm, ss, sss);\n\n\t\t\t\t\tif (parsedZ) {\n\t\t\t\t\t\treturn new Date(localDate.getTime() - (z + localDate.getTimezoneOffset()) * 60000);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn localDate;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t};\n\t\t}]);","angular.module('matroshkiApp')\n\n        .filter('removeSpaces', function () {\n            return function (string) {\n                return angular.isDefined(string) ? string.replace(/\\s/g, '') : '';\n            };\n        })\n        .filter('fromNow', function () {\n            return function (string) {\n                return angular.isDefined(string) ? moment(string).fromNow() : '';\n            };\n        })\n        .filter('elipsis', function () {\n            return function (string, count) {\n                if (angular.isDefined(string)) {\n                    return string.length > count ? string.substring(0, count) + '...' : string;\n                } else {\n                    return '';\n                }\n            };\n        })\n        .filter('ucFirst', function () {\n            return function (string) {\n                return angular.isDefined(string) ? string.charAt(0).toUpperCase() + string.slice(1) : '';\n            };\n        })\n        .filter('unit', function () {\n            return function (string) {\n                return (angular.isDefined(string) && angular.isNumber(string)) ? string + ' cm' : '';\n            };\n        })\n        .filter('minutePlural', function () {\n            return function (number) {\n                number = isNaN(number) ? 0 : number;\n                return (angular.isDefined(number) && angular.isNumber(number) && number > 1) ? number + ' minutes' : number + ' minute';\n            };\n        })\n        .filter('unique', function () {\n            return function (arr, field) {\n                return _.uniq(arr, function (a) {\n                    return a[field];\n                });\n            };\n        })\n        .filter('convertIcon', function () {\n            return function (string) {\n                if (!string) {\n                    return '';\n                }\n                var emojis = $.emojiarea.icons;\n                var util = {};\n                util.escapeRegex = function (str) {\n                    return (str + '').replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n                };\n                util.htmlEntities = function (str) {\n                    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n                };\n                var EmojiArea = function () {};\n                EmojiArea.createIcon = function (group, emoji) {\n                    var filename = $.emojiarea.icons[group]['icons'][emoji];\n                    var path = $.emojiarea.path || '';\n                    if (path.length && path.charAt(path.length - 1) !== '/') {\n                        path += '/';\n                    }\n                    return '<img src=\"' + path + filename + '\" alt=\"' + util.htmlEntities(emoji) + '\">';\n                };\n\n                for (var group in emojis) {\n                    for (var key in emojis[group]['icons']) {\n                        if (emojis[group]['icons'].hasOwnProperty(key)) {\n\n                            string = string.replace(new RegExp(util.escapeRegex(key), 'g'), EmojiArea.createIcon(group, key));\n\n                        }\n                    }\n                }\n                return string;\n\n                //return $.emoticons.replace(string);\n            };\n        })\n        .filter('capitalize', function () {\n            return function (input, all) {\n                var reg = !(all) ? /([^\\W_]+[^\\s-]*) */g : /([^\\W_]+[^\\s-]*)/;\n                return (!!input) ? input.replace(reg, function (txt) {\n                    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n                }) : '';\n            }\n        })\n        .filter('linkify', function () {\n            return function (text) {\n                var exp = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/ig;\n                return text.replace(exp, '<a href=\"$1\" target=\"_blank\">$1</a>');\n            };\n        })\n        .filter('htmlToPlaintext', function () {\n            return function (text) {\n                var a = $('<div/>');\n                a.html(text);\n                return  a.text();\n            };\n        })\n        .filter('htmlToPlaintextImg', function () {\n            return function (text) {\n                var a = $('<div/>');\n                a.html(text);\n                a.find('img').each(function () {\n                    $(this).after('{Image here}').remove();\n                });\n                return  a.text();\n            };\n        })\n        .filter('angularHtmlToPlaintext', function () {\n            return function (text) {\n                return angular.element(text).text();\n            };\n        })\n        .filter('phoneNumber', function () {\n            return function (str) {\n                if (typeof str !== 'string') {\n                    return '';\n                }\n                return str;\n            };\n        })\n        .filter('decimal', function () {\n            return function (input, places) {\n                return !isNaN(input) ? parseFloat(input).toFixed(places) : input;\n            };\n        }\n        )\n        .filter('round', function () {\n            return function (input) {\n                return !isNaN(input) ? Math.round(input) : 0;\n            };\n        })\n        .filter('age', function () {\n            return function (input, defaultText) {\n\n                defaultText = defaultText || 'Unknown';\n                if (!input) {\n                    return 'Unknown';\n                } else {\n                    var birthdate = new Date(input);\n                    var cur = new Date();\n                    var diff = cur - birthdate; // This is the difference in milliseconds\n                    return Math.floor(diff / 31536000000); // Divide by 1000*60*60*24*365\n                }\n            };\n        })\n        .filter('avatar', function (appSettings) {\n            return function (avatar) {\n                if (avatar != null && avatar.indexOf('imageSmall') != -1) {\n\n                    var meta = unserialize(avatar);\n                    if (meta && meta.imageMedium) {\n                        return appSettings.BASE_URL + meta.imageMedium;\n                    }\n                }\n                if (avatar != null && avatar.indexOf('http') != -1) {\n                    return avatar;\n                }\n                if(appSettings.placeholderAvatars && appSettings.placeholderAvatars.length) {\n                    return appSettings.placeholderAvatars[Math.floor(Math.random()*appSettings.placeholderAvatars.length)];\n                }\n                return appSettings.BASE_URL + 'images/64x64.png';\n\n            };\n        })\n        .filter('mainImage', function (appSettings) {\n            return function (data) {\n\n                if (data == null || data.mainImage == null) {\n                    return appSettings.BASE_URL + 'images/default-gallery.png';\n                }\n                return appSettings.BASE_URL + data.mainImage;\n            };\n        })\n        .filter('imageMedium', function (appSettings) {\n            return function (data) {\n\n                if (data == '') {\n                    return appSettings.BASE_URL + 'images/no_image_thumb.png';\n                }\n                if (data != '') {\n                    var images = unserialize(data);\n                    if (images && data.indexOf('imageMedium') != -1) {\n                        return appSettings.BASE_URL + images.imageMedium;\n                    } else {\n                        return appSettings.BASE_URL + 'images/no_image_thumb.png';\n                    }\n                }\n\n            };\n        })\n        .filter('thumbnail230', function (appSettings) {\n            return function (data) {\n\n                if (data == '') {\n                    return appSettings.BASE_URL + 'images/no_image_thumb.png';\n                }\n                if (data != '') {\n                    var images = unserialize(data);\n                    if (images && data.indexOf('thumbnail230') != -1) {\n                        return images.thumbnail230;\n                    } else {\n                        return appSettings.BASE_URL + 'images/no_image_thumb.png';\n                    }\n                }\n\n            };\n        })\n        .filter('chatUsername', function () {\n            return function (user, username) {\n                if (typeof user == 'undefined') {\n                    return 'guest';\n                }\n//            console.log('user',user.username);\n                if (user && user.username == null) {\n                    return 'guest';\n                }\n                if (user) {\n                    return (username && user.username == username) ? 'me' : user.username;//? user.username : 'guest';\n                }\n            };\n        })\n        .filter('statusColor', function () {\n            return function (practice) {\n\n                if (new Date(practice.expiresOn).getTime() < new Date().getTime() && practice.expiresOn) {\n                    return 'label-warning';\n                }\n                if (practice.status == 'draft') {\n                    return 'label-info';\n                }\n                if (practice.status == 'published') {\n                    return 'label-primary';\n                }\n                if (practice.status == 'revoked') {\n                    return 'label-danger';\n                }\n                return 'label-danger';\n            };\n        })\n        .filter('stringifyNumber', function () {\n            return function (n) {\n                var special = ['zeroth', 'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth', 'eleventh', 'twelvth', 'thirteenth', 'fourteenth', 'fifteenth', 'sixteenth', 'seventeenth', 'eighteenth', 'nineteenth'];\n                var deca = ['twent', 'thirt', 'fourt', 'fift', 'sixt', 'sevent', 'eight', 'ninet'];\n\n\n                if (n < 20)\n                    return special[n];\n                if (n % 10 === 0)\n                    return deca[Math.floor(n / 10) - 2] + 'ieth';\n                return deca[Math.floor(n / 10) - 2] + 'y-' + special[n % 10];\n\n            };\n        })\n        .filter('secondToMinutes', function () {\n            return function (second) {\n                if (angular.isNumber(second)) {\n                    return second / 60;\n                }\n                return 0;\n            };\n        })\n        .filter('unique', function () {\n            return function (collection, keyname) {\n                var output = [],\n                        keys = [];\n\n                angular.forEach(collection, function (item) {\n                    var key = item[keyname];\n                    if (keys.indexOf(key) === -1) {\n                        keys.push(key);\n                        output.push(item);\n                    }\n                });\n\n                return output;\n            };\n        })\n        .filter('externalLinks', function () {\n            return function (text) {\n                return String(text).replace(/href=/gm, \"class=\\\"ex-link\\\" href=\");\n            }\n        })\n        .filter('relativeTime', function () {\n            return function (time) {\n                return moment(time, 'YYYY-MM-DD H:s:i').fromNow();\n            };\n        })\n        .filter('shortDate', function () {\n            return function (data) {\n                var date = new Date(data.createdAt);\n\n                return date.getDay() + '-' + '-' + date.getMonth() + '-' + date.getFullYear();\n            };\n        })\n        .filter('mediumDate', function () {\n            return function (date) {\n//            var date = new Date(date);\n                return moment(date).format('MM-DD-YYYY');\n            };\n        })\n\n        .filter('spaceText', function () {\n            return function (data) {\n                if (data) {\n                    return data.replace('_', ' ');\n                }\n            };\n        })\n        .filter('spaceCapitalLetters', function () {\n            return function (text) {\n                if (angular.isString(text)) {\n                    return text.replace(/([A-Z])/g, ' $1').trim();\n                }\n            };\n        })\n        .filter('itemType', function (appSettings) {\n            return function (data) {\n                if (data == 'performer_product') {\n                    return 'product';\n                }\n                return data;\n            };\n        });\nfunction unserialize(data) {\n    //  discuss at: http://phpjs.org/functions/unserialize/\n    // original by: Arpad Ray (mailto:arpad@php.net)\n    // improved by: Pedro Tainha (http://www.pedrotainha.com)\n    // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // improved by: Chris\n    // improved by: James\n    // improved by: Le Torbi\n    // improved by: Eli Skeggs\n    // bugfixed by: dptr1988\n    // bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // bugfixed by: Brett Zamir (http://brett-zamir.me)\n    //  revised by: d3x\n    //    input by: Brett Zamir (http://brett-zamir.me)\n    //    input by: Martin (http://www.erlenwiese.de/)\n    //    input by: kilops\n    //    input by: Jaroslaw Czarniak\n    //        note: We feel the main purpose of this function should be to ease the transport of data between php & js\n    //        note: Aiming for PHP-compatibility, we have to translate objects to arrays\n    //   example 1: unserialize('a:3:{i:0;s:5:\"Kevin\";i:1;s:3:\"van\";i:2;s:9:\"Zonneveld\";}');\n    //   returns 1: ['Kevin', 'van', 'Zonneveld']\n    //   example 2: unserialize('a:3:{s:9:\"firstName\";s:5:\"Kevin\";s:7:\"midName\";s:3:\"van\";s:7:\"surName\";s:9:\"Zonneveld\";}');\n    //   returns 2: {firstName: 'Kevin', midName: 'van', surName: 'Zonneveld'}\n\n    var that = this,\n            utf8Overhead = function (chr) {\n                // http://phpjs.org/functions/unserialize:571#comment_95906\n                var code = chr.charCodeAt(0);\n                if (code < 0x0080\n                        || 0x00A0 <= code && code <= 0x00FF\n                        || [338, 339, 352, 353, 376, 402, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8226, 8230, 8240, 8364, 8482].indexOf(code) != -1)\n                {\n                    return 0;\n                }\n                if (code < 0x0800) {\n                    return 1;\n                }\n                return 2;\n            };\n    error = function (type, msg, filename, line) {\n        throw new that.window[type](msg, filename, line);\n    };\n    read_until = function (data, offset, stopchr) {\n        var i = 2,\n                buf = [],\n                chr = data.slice(offset, offset + 1);\n\n        while (chr != stopchr) {\n            if ((i + offset) > data.length) {\n                error('Error', 'Invalid');\n            }\n            buf.push(chr);\n            chr = data.slice(offset + (i - 1), offset + i);\n            i += 1;\n        }\n        return [buf.length, buf.join('')];\n    };\n    read_chrs = function (data, offset, length) {\n        var i, chr, buf;\n\n        buf = [];\n        for (i = 0; i < length; i++) {\n            chr = data.slice(offset + (i - 1), offset + i);\n            buf.push(chr);\n            length -= utf8Overhead(chr);\n        }\n        return [buf.length, buf.join('')];\n    };\n    _unserialize = function (data, offset) {\n        var dtype, dataoffset, keyandchrs, keys, contig,\n                length, array, readdata, readData, ccount,\n                stringlength, i, key, kprops, kchrs, vprops,\n                vchrs, value, chrs = 0,\n                typeconvert = function (x) {\n                    return x;\n                };\n\n        if (!offset) {\n            offset = 0;\n        }\n        dtype = (data.slice(offset, offset + 1))\n                .toLowerCase();\n\n        dataoffset = offset + 2;\n\n        switch (dtype) {\n            case 'i':\n                typeconvert = function (x) {\n                    return parseInt(x, 10);\n                };\n                readData = read_until(data, dataoffset, ';');\n                chrs = readData[0];\n                readdata = readData[1];\n                dataoffset += chrs + 1;\n                break;\n            case 'b':\n                typeconvert = function (x) {\n                    return parseInt(x, 10) !== 0;\n                };\n                readData = read_until(data, dataoffset, ';');\n                chrs = readData[0];\n                readdata = readData[1];\n                dataoffset += chrs + 1;\n                break;\n            case 'd':\n                typeconvert = function (x) {\n                    return parseFloat(x);\n                };\n                readData = read_until(data, dataoffset, ';');\n                chrs = readData[0];\n                readdata = readData[1];\n                dataoffset += chrs + 1;\n                break;\n            case 'n':\n                readdata = null;\n                break;\n            case 's':\n                ccount = read_until(data, dataoffset, ':');\n                chrs = ccount[0];\n                stringlength = ccount[1];\n                dataoffset += chrs + 2;\n\n                readData = read_chrs(data, dataoffset + 1, parseInt(stringlength, 10));\n                chrs = readData[0];\n                readdata = readData[1];\n                dataoffset += chrs + 2;\n                if (chrs != parseInt(stringlength, 10) && chrs != readdata.length) {\n                    error('SyntaxError', 'String length mismatch');\n                }\n                break;\n            case 'a':\n                readdata = {};\n\n                keyandchrs = read_until(data, dataoffset, ':');\n                chrs = keyandchrs[0];\n                keys = keyandchrs[1];\n                dataoffset += chrs + 2;\n\n                length = parseInt(keys, 10);\n                contig = true;\n\n                for (i = 0; i < length; i++) {\n                    kprops = _unserialize(data, dataoffset);\n                    kchrs = kprops[1];\n                    key = kprops[2];\n                    dataoffset += kchrs;\n\n                    vprops = _unserialize(data, dataoffset);\n                    vchrs = vprops[1];\n                    value = vprops[2];\n                    dataoffset += vchrs;\n\n                    if (key !== i)\n                        contig = false;\n\n                    readdata[key] = value;\n                }\n\n                if (contig) {\n                    array = new Array(length);\n                    for (i = 0; i < length; i++)\n                        array[i] = readdata[i];\n                    readdata = array;\n                }\n\n                dataoffset += 1;\n                break;\n            default:\n                error('SyntaxError', 'Unknown / Unhandled data type(s): ' + dtype);\n                break;\n        }\n        return [dtype, dataoffset - offset, typeconvert(readdata)];\n    };\n\n    return _unserialize((data + ''), 0)[2];\n}"]}